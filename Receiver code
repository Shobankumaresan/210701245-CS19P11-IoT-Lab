#include <esp_now.h>
#include <WiFi.h>

#define CHANNEL 1
int m1 = 19;
int m2 = 21;
int m3 = 22;
int m4 = 23;
int en1 = 26;
int en2= 27;

// Init ESP Now with fallback
void InitESPNow() {
  WiFi.disconnect();
  if (esp_now_init() == ESP_OK) {
    Serial.println("ESPNow Init Success");
  }
  else {
    Serial.println("ESPNow Init Failed");
    // Retry InitESPNow, add a counte and then restart?
    // InitESPNow();
    // or Simply Restart
    ESP.restart();
  }
}

// config AP SSID
void configDeviceAP() {
  const char *SSID = "Slave_1";
  bool result = WiFi.softAP(SSID, "Slave_1_Password", CHANNEL, 0);
  if (!result) {
    Serial.println("AP Config failed.");
  } else {
    Serial.println("AP Config Success. Broadcasting with AP: " + String(SSID));
    Serial.print("AP CHANNEL "); Serial.println(WiFi.channel());
  }
}
void forward() {
  digitalWrite(m1, HIGH);
  digitalWrite(m2, LOW);
  digitalWrite(m4, HIGH);
  digitalWrite(m3, LOW);
}

void backward() {
  digitalWrite(m1, LOW);
  digitalWrite(m2, HIGH);
  digitalWrite(m4, LOW);
  digitalWrite(m3, HIGH);
}

void left() {
  digitalWrite(m1, HIGH);
  digitalWrite(m4, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(m3, HIGH);
}

void right() {
  digitalWrite(m1, LOW);
  digitalWrite(m4, HIGH);
  digitalWrite(m2, HIGH);
  digitalWrite(m3, LOW);
}

void stopd() {
  digitalWrite(m1, LOW);
  digitalWrite(m4, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);
}

void setup() {
  
  Serial.begin(115200);
  Serial.println("ESPNow/Basic/Slave Example");
  //Set device in AP mode to begin with
  WiFi.mode(WIFI_AP);
  // configure device AP mode
  configDeviceAP();
  // This is the mac address of the Slave in AP Mode
  Serial.print("AP MAC: "); Serial.println(WiFi.softAPmacAddress());
  // Init ESPNow with a fallback logic
  
  InitESPNow();
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info.
  pinMode(m1,OUTPUT);
pinMode(m2,OUTPUT);
pinMode(m3,OUTPUT);
pinMode(m4,OUTPUT);
pinMode(en1,OUTPUT);
pinMode(en2,OUTPUT);
digitalWrite(en1,HIGH);
digitalWrite(en2,HIGH);
  esp_now_register_recv_cb(OnDataRecv);
}

// callback when data is recv from Master
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print("Last Packet Recv from: "); Serial.println(macStr);
  Serial.print("Last Packet Recv Data: "); Serial.println(*data);
  Serial.println("");
  if(*data == 5){
    Serial.println("R");
    right();
  }
  else if(*data == 2){
    Serial.println("F");
    forward();
  }
  else if(*data == 3){
    Serial.println("B");
    backward();
  }
  else if(*data == 4){
    Serial.println("L");
    left();
  }
  else{
   
    Serial.println("Stop");
    stopd();
 
  }
}

void loop() {
  // Chill
}
